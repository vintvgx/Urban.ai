worker_processes 1;

events {
    worker_connections 1024;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    server {
        listen       80;
        server_name  localhost;

        # Access log with buffer, or disable it entirely if not needed
        access_log /var/log/nginx/host.access.log main buffer=32k flush=1m;
        error_log /var/log/nginx/host.error.log;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files $uri /index.html;
        }

        location /api/ {
            proxy_pass http://backend:4000/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # Optional: serve static files directly and avoid log entries for these
        location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|tgz|gz|rar|bz2|doc|xls|exe|pdf|ppt|txt|tar|mid|midi|wav|bmp|rtf|js)$ {
            root        /usr/share/nginx/html;
            access_log  off;
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }
}


# worker_processes and worker_connections: These control how NGINX handles connections in a simplified manner.
# http block: Contains directives for managing the behavior of HTTP and HTTPS servers.
# server block: Defines the server and what protocol it will listen for (which is HTTP on port 80 in this case).
# location /: Defines how to respond to requests for the root URL. It serves the static files and sends all routes through index.html to let React-Router take over routing.
# location /api/: Proxies any API requests to the Node backend (adjust the backend name and port according to your Docker setup).
# location for static files: (Optional) directly serves static files and avoids log entries for them.